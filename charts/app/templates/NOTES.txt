1. Get the application URL by running these commands:
{{- if .Values.ingress.enabled }}
{{- range $host := .Values.ingress.hosts }}
  {{- range .paths }}
  http{{ if $.Values.ingress.tls }}s{{ end }}://{{ $host.host }}{{ .path }}
  {{- end }}
{{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ include "app.namespace" . }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "app.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ include "app.namespace" . }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
     NOTE: It may take a few minutes for the LoadBalancer IP to be available.
           You can watch the status of by running 'kubectl get --namespace {{ include "app.namespace" . }} svc -w {{ include "app.fullname" . }}'
  export SERVICE_IP=$(kubectl get svc --namespace {{ include "app.namespace" . }} {{ include "app.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ include "app.namespace" . }} -l "{{ include "app.selectorLabels" . | replace ": " "=" | replace "\n" "," }}" -o jsonpath="{.items[0].metadata.name}")
  export CONTAINER_PORT=$(kubectl get pod --namespace {{ include "app.namespace" . }} $POD_NAME -o jsonpath="{.spec.containers[0].ports[0].containerPort}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ include "app.namespace" . }} port-forward $POD_NAME 8080:$CONTAINER_PORT
{{- end }}

{{- if .Values.persistence.enabled }}

2. Your data is persisted in a PersistentVolumeClaim named {{ include "app.pvcName" . }}.
{{- end }}

{{- if .Values.serviceMonitor.enabled }}

3. ServiceMonitor has been created to enable Prometheus scraping.
{{- end }}

{{- if .Values.autoscaling.enabled }}

4. Horizontal Pod Autoscaling is enabled with min {{ .Values.autoscaling.minReplicas }} and max {{ .Values.autoscaling.maxReplicas }} replicas.
{{- end }}

{{- if .Values.networkPolicy.enabled }}

5. NetworkPolicy has been applied to control network traffic to/from the pods.
{{- end }}
