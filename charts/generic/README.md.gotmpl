{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

## Features

- **All Workload Types**: Supports Deployment, StatefulSet, DaemonSet, Job, and CronJob
- **Flexible Networking**: Service, Ingress (ALB/NGINX), and Gateway API support
- **Advanced Scaling**: HPA, VPA, and KEDA autoscaling options
- **Comprehensive Security**: RBAC, NetworkPolicy, Pod Security Standards, and secure defaults
- **Persistence**: Multiple volume types, CSI snapshots, and StatefulSet volume claims
- **Observability**: Prometheus, Datadog, and custom metrics integration
- **Cloud Native**: External Secrets, workload identity, and native sidecar containers
- **High Availability**: PDB, topology spread, and anti-affinity configurations
- **Extensibility**: Helm hooks, extra objects, and modular template architecture

## Quick Start

### Add the Helm Repository

```bash
helm repo add dnd-it https://dnd-it.github.io/helm-charts
helm repo update
```

### Install the Chart

```bash
# Basic installation
helm install my-release dnd-it/generic

# With custom values
helm install my-release dnd-it/generic -f values.yaml

# Deploy as StatefulSet
helm install my-release dnd-it/generic \
  --set workload.type=statefulset \
  --set image.repository=postgres \
  --set image.tag=15-alpine

# Deploy as CronJob
helm install my-release dnd-it/generic \
  --set workload.type=cronjob \
  --set workload.schedule="0 * * * *" \
  --set image.repository=myorg/backup-job
```

## Configuration

### Core Application Settings

| Parameter | Description | Default |
|-----------|-------------|---------|
| `app.name` | Application name | `""` (chart name) |
| `app.version` | Application version | `""` (chart appVersion) |
| `image.repository` | Container image repository | `nginx` |
| `image.tag` | Container image tag | `1.21` |
| `image.pullPolicy` | Image pull policy | `IfNotPresent` |

### Deployment Configuration

| Parameter | Description | Default |
|-----------|-------------|---------|
| `deployment.enabled` | Enable deployment | `true` |
| `deployment.replicas` | Number of replicas | `1` |
| `deployment.strategy.type` | Deployment strategy | `RollingUpdate` |
| `deployment.resources` | Resource limits and requests | `{}` |
| `deployment.nodeSelector` | Node selector | `{}` |
| `deployment.tolerations` | Pod tolerations | `[]` |
| `deployment.affinity` | Pod affinity rules | `{}` |

### Service Configuration

| Parameter | Description | Default |
|-----------|-------------|---------|
| `service.enabled` | Enable service | `true` |
| `service.type` | Service type | `ClusterIP` |
| `service.port` | Service port | `80` |
| `service.targetPort` | Target port | `http` |

### Ingress Configuration

| Parameter | Description | Default |
|-----------|-------------|---------|
| `ingress.enabled` | Enable ingress | `false` |
| `ingress.className` | Ingress class name | `""` |
| `ingress.hosts` | Ingress hosts configuration | See values.yaml |
| `ingress.tls` | TLS configuration | `[]` |

### Persistence Configuration

| Parameter | Description | Default |
|-----------|-------------|---------|
| `persistence.enabled` | Enable persistent storage | `false` |
| `persistence.size` | Storage size | `8Gi` |
| `persistence.accessMode` | Access mode | `ReadWriteOnce` |
| `persistence.storageClass` | Storage class | `""` |
| `persistence.mountPath` | Mount path in container | `/data` |

### Health Checks

| Parameter | Description | Default |
|-----------|-------------|---------|
| `deployment.livenessProbe.enabled` | Enable liveness probe | `false` |
| `deployment.readinessProbe.enabled` | Enable readiness probe | `false` |
| `deployment.startupProbe.enabled` | Enable startup probe | `false` |

### Autoscaling

| Parameter | Description | Default |
|-----------|-------------|---------|
| `autoscaling.enabled` | Enable HPA | `false` |
| `autoscaling.minReplicas` | Minimum replicas | `1` |
| `autoscaling.maxReplicas` | Maximum replicas | `100` |
| `autoscaling.targetCPUUtilizationPercentage` | CPU target | `80` |
| `autoscaling.targetMemoryUtilizationPercentage` | Memory target | `80` |

### Security

| Parameter | Description | Default |
|-----------|-------------|---------|
| `serviceAccount.enabled` | Enable service account | `true` |
| `serviceAccount.create` | Create service account | `true` |
| `rbac.enabled` | Enable RBAC | `false` |
| `networkPolicy.enabled` | Enable network policy | `false` |
| `podDisruptionBudget.enabled` | Enable PDB | `false` |

### Monitoring

| Parameter | Description | Default |
|-----------|-------------|---------|
| `serviceMonitor.enabled` | Enable ServiceMonitor | `false` |
| `serviceMonitor.interval` | Scrape interval | `30s` |
| `serviceMonitor.path` | Metrics path | `/metrics` |

## Examples

### Basic Web Application

```yaml
image:
  repository: nginx
  tag: "1.21"

service:
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  hosts:
    - host: myapp.example.com
      paths:
        - path: /
          pathType: Prefix

deployment:
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
```

### Application with Database

```yaml
image:
  repository: myapp
  tag: "v1.0.0"

persistence:
  enabled: true
  size: 20Gi
  mountPath: /var/lib/data

configMap:
  enabled: true
  data:
    database.conf: |
      host=postgres.default.svc.cluster.local
      port=5432

secret:
  enabled: true
  stringData:
    db-password: "supersecret"

deployment:
  env:
    - name: DB_HOST
      valueFrom:
        configMapKeyRef:
          name: myapp-config
          key: database.host
    - name: DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: myapp-secret
          key: db-password
```

### High Availability Setup

```yaml
deployment:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

podDisruptionBudget:
  enabled: true
  minAvailable: 2

deployment:
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - myapp
            topologyKey: kubernetes.io/hostname
```

## Upgrading

### From v0.x to v1.x

- Update values file structure according to new schema
- Review breaking changes in CHANGELOG.md

## Development

### Testing

```bash
# Lint the chart
helm lint .

# Test template rendering
helm template test-release . -f values-example.yaml

# Test installation
helm install test-release . --dry-run --debug
```

### Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests if applicable
5. Submit a pull request

## License

This chart is licensed under the MIT License. See LICENSE file for details.

## Support

- Documentation: [Chart Documentation](https://github.com/dnd-it/helm-charts/tree/main/charts/generic)
- Issues: [GitHub Issues](https://github.com/dnd-it/helm-charts/issues)
- Discussions: [GitHub Discussions](https://github.com/dnd-it/helm-charts/discussions)

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}
