# Example: Multi-Container Application with Native Sidecars
# Main app with logging, monitoring, and proxy sidecars

nameOverride: "multi-container-app"

deployment:
  enabled: true
  replicas: 2
  env:
    - name: APP_NAME
      value: "multi-container-demo"
    - name: LOG_LEVEL
      value: "info"
    - name: PROXY_URL
      value: "http://localhost:8888"

  resources:
    limits:
      memory: "1Gi"
      cpu: "1000m"
    requests:
      cpu: "200m"
      memory: "512Mi"

  ports:
    - name: http
      containerPort: 8080

  volumeMounts:
    - name: app-logs
      mountPath: /var/log/app
    - name: shared-data
      mountPath: /data

# Additional main containers (for multi-container pods)
containers:
  - name: worker
    image: myorg/worker:3.2.1
    command: ["./worker"]
    args: ["--mode=background"]
    env:
      - name: WORKER_TYPE
        value: "processor"
      - name: REDIS_URL
        value: "redis://redis:6379"
    resources:
      limits:
        memory: "512Mi"
        cpu: "500m"
      requests:
        cpu: "100m"
        memory: "256Mi"
    volumeMounts:
      - name: shared-data
        mountPath: /data

# Native Kubernetes sidecar containers (restartPolicy: Always)
sidecarContainers:
  # Log shipper sidecar
  - name: log-shipper
    image: fluent/fluent-bit:2.2
    env:
      - name: FLUENT_ELASTICSEARCH_HOST
        value: "elasticsearch.logging"
      - name: FLUENT_ELASTICSEARCH_PORT
        value: "9200"
    resources:
      limits:
        memory: "200Mi"
        cpu: "200m"
      requests:
        cpu: "50m"
        memory: "100Mi"
    volumeMounts:
      - name: app-logs
        mountPath: /var/log/app
        readOnly: true
      - name: fluent-bit-config
        mountPath: /fluent-bit/etc
    ports:
      - name: metrics
        containerPort: 2020

  # Envoy proxy sidecar
  - name: envoy-proxy
    image: envoyproxy/envoy:v1.28-latest
    command: ["/usr/local/bin/envoy"]
    args:
      - "-c"
      - "/etc/envoy/envoy.yaml"
      - "--service-cluster"
      - "multi-container-app"
      - "--service-node"
      - "$(POD_NAME)"
    env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: POD_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
    ports:
      - name: proxy
        containerPort: 8888
      - name: admin
        containerPort: 9901
    resources:
      limits:
        memory: "256Mi"
        cpu: "200m"
      requests:
        cpu: "50m"
        memory: "128Mi"
    volumeMounts:
      - name: envoy-config
        mountPath: /etc/envoy
    livenessProbe:
      httpGet:
        path: /ready
        port: admin
      initialDelaySeconds: 10
      periodSeconds: 10

  # Metrics collector sidecar
  - name: metrics-collector
    image: prom/node-exporter:v1.7.0
    args:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points"
      - "^/(dev|proc|sys|var/lib/docker/.+)($|/)"
    ports:
      - name: metrics
        containerPort: 9100
    resources:
      limits:
        memory: "100Mi"
        cpu: "100m"
      requests:
        cpu: "10m"
        memory: "50Mi"
    volumeMounts:
      - name: proc
        mountPath: /host/proc
        readOnly: true
      - name: sys
        mountPath: /host/sys
        readOnly: true

# Init containers for setup
initContainers:
  - name: wait-for-db
    image: busybox:1.36
    command: ['sh', '-c']
    args:
      - |
        until nc -z postgres 5432; do
          echo "Waiting for database..."
          sleep 2
        done
        echo "Database is ready!"
    resources:
      limits:
        memory: "64Mi"
        cpu: "100m"
      requests:
        cpu: "10m"
        memory: "32Mi"

  - name: init-config
    image: busybox:1.36
    command: ['sh', '-c']
    args:
      - |
        echo "Initializing configuration..."
        cp /config-template/* /data/
        echo "Configuration initialized"
    volumeMounts:
      - name: config-template
        mountPath: /config-template
      - name: shared-data
        mountPath: /data
    resources:
      limits:
        memory: "64Mi"
        cpu: "100m"
      requests:
        cpu: "10m"
        memory: "32Mi"

# Volumes configuration
persistence:
  enabled: true
  volumes:
    app-logs:
      type: emptyDir
      emptyDir:
        sizeLimit: 1Gi
    shared-data:
      type: emptyDir
      emptyDir:
        medium: Memory
        sizeLimit: 256Mi
    envoy-config:
      type: configMap
      configMap:
        name: envoy-config
    fluent-bit-config:
      type: configMap
      configMap:
        name: fluent-bit-config
    proc:
      type: hostPath
      hostPath:
        path: /proc
    sys:
      type: hostPath
      hostPath:
        path: /sys
    config-template:
      type: configMap
      configMap:
        name: app-config-template

# Service exposing multiple ports
service:
  enabled: true
  type: ClusterIP
  ports:
    - name: http
      port: 80
      targetPort: 8080
    - name: proxy
      port: 8888
      targetPort: proxy
    - name: metrics
      port: 9100
      targetPort: 9100
    - name: fluent-metrics
      port: 2020
      targetPort: 2020

# ConfigMaps for sidecar configurations
configMap:
  enabled: true
  name: app-config-template
  data:
    config.yaml: |
      app:
        name: multi-container-demo
        version: 3.2.1

extraConfigMaps:
  envoy-config:
    data:
      envoy.yaml: |
        admin:
          address:
            socket_address:
              protocol: TCP
              address: 0.0.0.0
              port_value: 9901

        static_resources:
          listeners:
          - name: listener_0
            address:
              socket_address:
                protocol: TCP
                address: 0.0.0.0
                port_value: 8888
            filter_chains:
            - filters:
              - name: envoy.filters.network.http_connection_manager
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                  stat_prefix: ingress_http
                  route_config:
                    name: local_route
                    virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                      - match:
                          prefix: "/"
                        route:
                          host_rewrite_literal: www.example.com
                          cluster: service_example
                  http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

          clusters:
          - name: service_example
            connect_timeout: 30s
            type: LOGICAL_DNS
            dns_lookup_family: V4_ONLY
            load_assignment:
              cluster_name: service_example
              endpoints:
              - lb_endpoints:
                - endpoint:
                    address:
                      socket_address:
                        address: www.example.com
                        port_value: 443
            transport_socket:
              name: envoy.transport_sockets.tls
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext

  fluent-bit-config:
    data:
      fluent-bit.conf: |
        [SERVICE]
            Daemon Off
            Flush 1
            Log_Level info
            Parsers_File parsers.conf
            HTTP_Server On
            HTTP_Listen 0.0.0.0
            HTTP_Port 2020

        [INPUT]
            Name tail
            Path /var/log/app/*.log
            Parser json
            Tag app.logs
            Refresh_Interval 5

        [OUTPUT]
            Name es
            Match *
            Host ${FLUENT_ELASTICSEARCH_HOST}
            Port ${FLUENT_ELASTICSEARCH_PORT}
            Index app-logs
            Type _doc

      parsers.conf: |
        [PARSER]
            Name json
            Format json
            Time_Key timestamp
            Time_Format %Y-%m-%dT%H:%M:%S.%L

# Network policy allowing required traffic
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: prometheus
      ports:
        - protocol: TCP
          port: 9100
        - protocol: TCP
          port: 2020
        - protocol: TCP
          port: 9901
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432
    - to:
        - namespaceSelector:
            matchLabels:
              name: logging
        - podSelector:
            matchLabels:
              app: elasticsearch
      ports:
        - protocol: TCP
          port: 9200
    - ports:
        - protocol: TCP
          port: 443  # For external HTTPS calls
