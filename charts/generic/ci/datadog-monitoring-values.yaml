# Example: Comprehensive Datadog Monitoring Setup
# Demonstrates all Datadog Operator custom resources

nameOverride: "datadog-app"

workload:
  type: deployment
  enabled: true
  replicas: 3

image:
  repository: myorg/web-app
  tag: "2.5.0"

deployment:
  env:
    - name: DD_SERVICE
      value: "datadog-app"
    - name: DD_ENV
      value: "production"
    - name: DD_VERSION
      value: "2.5.0"
    - name: DD_LOGS_INJECTION
      value: "true"
    - name: DD_TRACE_ENABLED
      value: "true"
    - name: DD_PROFILING_ENABLED
      value: "true"

  resources:
    limits:
      memory: "1Gi"
      cpu: "1000m"
    requests:
      cpu: "200m"
      memory: "512Mi"

service:
  enabled: true
  type: ClusterIP
  port: 8080

# Note: This example assumes DatadogAgent is already installed cluster-wide
# The agent should be configured with APM, logging, and metrics collection enabled

# Datadog Monitors
datadogMonitor:
  enabled: true
  monitors:
    # High error rate monitor
    high-error-rate:
      enabled: true
      labels:
        severity: critical
      query: 'avg(last_5m):sum:trace.servlet.request.errors{env:production,service:datadog-app} by {resource_name}.as_rate() / sum:trace.servlet.request.hits{env:production,service:datadog-app} by {resource_name}.as_rate() > 0.05'
      type: "query alert"
      name: "High Error Rate - {{ resource_name }}"
      message: |
        Error rate is above 5% for endpoint {{ resource_name }}

        Current error rate: {{ value }}%

        Please investigate:
        - Check application logs: https://app.datadoghq.com/logs?query=service:datadog-app
        - View APM traces: https://app.datadoghq.com/apm/traces?query=service:datadog-app
        - Runbook: https://wiki.example.com/runbooks/high-error-rate

        @pagerduty-critical @slack-alerts
      tags:
        - "service:datadog-app"
        - "team:platform"
        - "env:production"
      priority: 1
      options:
        thresholds:
          critical: 0.05
          warning: 0.03
        notifyNoData: true
        noDataTimeframe: 10
        renotifyInterval: 60
        escalationMessage: "Error rate still above threshold after 1 hour"
        includeTags: true
        evaluationDelay: 60
        newGroupDelay: 60

    # High latency monitor
    high-latency:
      enabled: true
      query: 'avg(last_5m):avg:trace.servlet.request.duration{env:production,service:datadog-app} by {resource_name} > 2000'
      type: "query alert"
      name: "High Latency - {{ resource_name }}"
      message: |
        P50 latency is above 2s for endpoint {{ resource_name }}
        @slack-alerts
      tags:
        - "service:datadog-app"
        - "team:platform"
      priority: 2
      options:
        thresholds:
          critical: 2000
          warning: 1000

    # Pod crash loop monitor
    pod-crashloop:
      enabled: true
      query: 'max(last_5m):max:kubernetes.containers.restarts{kube_deployment:datadog-app} by {pod_name} > 3'
      type: "query alert"
      name: "Pod CrashLoopBackOff - {{ pod_name }}"
      message: |
        Pod {{ pod_name }} has restarted more than 3 times in the last 5 minutes

        Check pod logs and events:
        ```
        kubectl logs {{ pod_name }}
        kubectl describe pod {{ pod_name }}
        ```
        @pagerduty-critical
      tags:
        - "service:datadog-app"
        - "alert:crashloop"
      priority: 1

    # Memory usage monitor
    high-memory:
      enabled: true
      query: 'avg(last_5m):avg:kubernetes.memory.usage{kube_deployment:datadog-app} by {pod_name} / avg:kubernetes.memory.limit{kube_deployment:datadog-app} by {pod_name} > 0.9'
      type: "query alert"
      name: "High Memory Usage - {{ pod_name }}"
      message: "Pod {{ pod_name }} memory usage is above 90% of limit"
      tags:
        - "service:datadog-app"
        - "resource:memory"
      priority: 3

# Service Level Objectives
datadogSLO:
  enabled: true
  slos:
    # Availability SLO
    availability:
      enabled: true
      labels:
        team: platform
      name: "datadog-app Availability"
      description: "99.9% of requests should be successful"
      type: "metric"
      query:
        numerator: 'sum:trace.servlet.request.hits{service:datadog-app,env:production} - sum:trace.servlet.request.errors{service:datadog-app,env:production}'
        denominator: 'sum:trace.servlet.request.hits{service:datadog-app,env:production}'
      targetThreshold: 99.9
      timeframe: "30d"
      warningThreshold: 99.95
      tags:
        - "service:datadog-app"
        - "team:platform"
        - "tier:1"
      monitorIDs: []  # Can link to monitor IDs

    # Latency SLO
    latency:
      enabled: true
      name: "datadog-app Latency"
      description: "95% of requests should complete within 1s"
      type: "metric"
      query:
        numerator: 'sum:trace.servlet.request.hits{service:datadog-app,env:production,duration:<1000}'
        denominator: 'sum:trace.servlet.request.hits{service:datadog-app,env:production}'
      targetThreshold: 95
      timeframe: "7d"
      warningThreshold: 97
      tags:
        - "service:datadog-app"
        - "team:platform"
        - "tier:1"

# Datadog Metrics for HPA
datadogMetric:
  enabled: true
  metrics:
    # Custom metric for autoscaling based on request rate
    request-rate:
      enabled: true
      labels:
        purpose: autoscaling
      query: 'avg:trace.servlet.request.hits{service:datadog-app,env:production}.rollup(avg, 60)'
      # Optional: can be used for external metrics in HPA
      externalMetricName: "datadog-app-request-rate"

    # Queue depth metric
    queue-depth:
      enabled: true
      query: 'avg:custom.queue.depth{service:datadog-app,env:production}'
      externalMetricName: "datadog-app-queue-depth"

# Datadog Dashboard
datadogDashboard:
  enabled: true
  dashboards:
    # Application overview dashboard
    app-overview:
      enabled: true
      labels:
        team: platform
      title: "Datadog App - Production Overview"
      description: "Comprehensive view of datadog-app performance and health"
      layoutType: "ordered"
      widgets:
        - definition:
            type: "timeseries"
            title: "Request Rate"
            requests:
              - q: "sum:trace.servlet.request.hits{service:datadog-app,env:production} by {resource_name}.as_rate()"
                displayType: "line"
                style:
                  palette: "dog_classic"
                  lineType: "solid"
                  lineWidth: "normal"
            yaxis:
              includeZero: true
              scale: "linear"
            showLegend: true
          layout:
            x: 0
            y: 0
            width: 6
            height: 3

        - definition:
            type: "timeseries"
            title: "Error Rate %"
            requests:
              - q: "100 * sum:trace.servlet.request.errors{service:datadog-app,env:production} by {resource_name}.as_rate() / sum:trace.servlet.request.hits{service:datadog-app,env:production} by {resource_name}.as_rate()"
                displayType: "line"
                style:
                  palette: "warm"
            yaxis:
              includeZero: true
              max: "10"
            markers:
              - value: "y=5"
                displayType: "error dashed"
                label: "SLO threshold"
          layout:
            x: 6
            y: 0
            width: 6
            height: 3

        - definition:
            type: "query_value"
            title: "Current Error Rate"
            requests:
              - q: "100 * sum:trace.servlet.request.errors{service:datadog-app,env:production}.as_rate() / sum:trace.servlet.request.hits{service:datadog-app,env:production}.as_rate()"
                aggregator: "last"
                conditionalFormats:
                  - comparator: "<"
                    value: 1
                    palette: "white_on_green"
                  - comparator: "<"
                    value: 5
                    palette: "white_on_yellow"
                  - comparator: ">="
                    value: 5
                    palette: "white_on_red"
            precision: 2
            textAlign: "center"
            customUnit: "%"
          layout:
            x: 0
            y: 3
            width: 3
            height: 2

        - definition:
            type: "toplist"
            title: "Top Endpoints by Latency"
            requests:
              - q: "top(avg:trace.servlet.request.duration{service:datadog-app,env:production} by {resource_name}, 10, 'mean', 'desc')"
                style:
                  palette: "dog_classic"
          layout:
            x: 3
            y: 3
            width: 4
            height: 3

        - definition:
            type: "heatmap"
            title: "Latency Distribution"
            requests:
              - q: "avg:trace.servlet.request.duration{service:datadog-app,env:production} by {resource_name}"
                style:
                  palette: "dog_classic"
            yaxis:
              includeZero: true
              scale: "linear"
          layout:
            x: 7
            y: 3
            width: 5
            height: 3

# HPA configuration using Datadog metrics
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  metrics:
    - type: External
      external:
        metric:
          name: datadog-app-request-rate
          selector:
            matchLabels:
              service: datadog-app
        target:
          type: AverageValue
          averageValue: "100"  # Scale up when avg requests/sec > 100
    - type: External
      external:
        metric:
          name: datadog-app-queue-depth
          selector:
            matchLabels:
              service: datadog-app
        target:
          type: Value
          value: "50"  # Scale up when queue depth > 50

# Pod annotations for Datadog
podAnnotations:
  # APM and profiling
  admission.datadoghq.com/java-lib.version: "v1.31.1"

  # Log configuration
  ad.datadoghq.com/datadog-app.logs: |
    [{
      "source": "java",
      "service": "datadog-app",
      "log_processing_rules": [{
        "type": "multi_line",
        "name": "log_start_with_timestamp",
        "pattern": "\\d{4}-\\d{2}-\\d{2}"
      }]
    }]

  # Custom metrics
  ad.datadoghq.com/datadog-app.check_names: '["openmetrics"]'
  ad.datadoghq.com/datadog-app.init_configs: '[{}]'
  ad.datadoghq.com/datadog-app.instances: |
    [{
      "openmetrics_endpoint": "http://%%host%%:8080/metrics",
      "namespace": "datadog_app",
      "metrics": ["*"]
    }]
