# Example: Application with External Secrets from AWS
# Demonstrates pulling secrets from AWS Secrets Manager and Parameter Store

nameOverride: "aws-app"

workload:
  type: deployment
  enabled: true
  replicas: 3

image:
  repository: myorg/aws-integrated-app
  tag: "1.8.0"
  pullPolicy: IfNotPresent

deployment:
  env:
    - name: APP_NAME
      value: "aws-secrets-app"
    - name: AWS_REGION
      value: "us-east-1"

    # Reference composed secret
    - name: RDS_CONNECTION_STRING
      valueFrom:
        secretKeyRef:
          name: aws-app-rds-connection
          key: connection-url

    # Reference API credentials
    - name: STRIPE_API_KEY
      valueFrom:
        secretKeyRef:
          name: aws-app-payment-secrets
          key: stripe-api-key

    - name: SENDGRID_API_KEY
      valueFrom:
        secretKeyRef:
          name: aws-app-payment-secrets
          key: sendgrid-api-key

service:
  enabled: true
  type: ClusterIP
  port: 8080

# External Secrets configuration for AWS
externalSecrets:
  # RDS database connection from Secrets Manager
  rds-connection:
    enabled: true
    refreshInterval: 5m

    secretStoreRef:
      name: aws-secretsmanager
      kind: ClusterSecretStore

    target:
      name: aws-app-rds-connection
      creationPolicy: Owner

      # Compose connection URL from JSON secret
      template:
        type: Opaque
        engineVersion: v2
        data:
          connection-url: "postgresql://{{ .username }}:{{ .password }}@{{ .endpoint }}:{{ .port }}/{{ .dbname }}"
          username: "{{ .username }}"
          password: "{{ .password }}"
          endpoint: "{{ .endpoint }}"
          port: "{{ .port }}"
          dbname: "{{ .dbname }}"

    # Pull entire JSON secret and extract fields
    dataFrom:
      - extract:
          key: prod/rds/main-database

  # Payment provider secrets
  payment-secrets:
    enabled: true
    refreshInterval: 1h

    secretStoreRef:
      name: aws-secretsmanager
      kind: ClusterSecretStore

    target:
      name: aws-app-payment-secrets
      creationPolicy: Owner

    # Individual secrets from different sources
    data:
      - secretKey: stripe-api-key
        remoteRef:
          key: prod/api/stripe
          property: api_key

      - secretKey: stripe-webhook-secret
        remoteRef:
          key: prod/api/stripe
          property: webhook_secret

      - secretKey: sendgrid-api-key
        remoteRef:
          key: prod/api/sendgrid
          property: api_key

  # Application configuration from Parameter Store
  app-config:
    enabled: true
    refreshInterval: 30m

    secretStoreRef:
      name: aws-parameterstore
      kind: ClusterSecretStore

    target:
      name: aws-app-config
      creationPolicy: Owner

    # Find all parameters by path prefix
    dataFrom:
      - find:
          path: "/production/app/"
          name:
            regexp: "^config.*"

    # Also get specific parameters
    data:
      - secretKey: feature-flags
        remoteRef:
          key: /production/app/feature-flags

      - secretKey: rate-limits
        remoteRef:
          key: /production/app/rate-limits

  # Cross-region replication example
  dr-secrets:
    enabled: true
    refreshInterval: 10m

    secretStoreRef:
      name: aws-secretsmanager-dr
      kind: ClusterSecretStore

    target:
      name: aws-app-dr-config
      creationPolicy: Owner

    # Replicated secrets from DR region
    data:
      - secretKey: dr-endpoint
        remoteRef:
          key: dr/config/endpoints
          property: primary_failover

      - secretKey: dr-credentials
        remoteRef:
          key: dr/config/credentials
          property: service_account

# Service Account with IRSA annotations
serviceAccount:
  enabled: true
  annotations:
    # IAM role for service account (IRSA)
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789012:role/aws-app-secrets-reader"
  name: aws-app

# ConfigMap for non-sensitive config
configMap:
  enabled: true
  data:
    app-config.yaml: |
      aws:
        region: us-east-1
        dynamodb:
          tables:
            - sessions
            - cache
        s3:
          buckets:
            uploads: my-app-uploads
            static: my-app-static

# Monitoring
serviceMonitor:
  enabled: true
  endpoints:
    - port: metrics
      interval: 30s

# Network policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # AWS services (HTTPS)
    - ports:
        - protocol: TCP
          port: 443
