# Example: Application with External Secrets from Vault
# Demonstrates pulling secrets from HashiCorp Vault using External Secrets Operator

nameOverride: "vault-app"

workload:
  type: deployment
  enabled: true
  replicas: 2

image:
  repository: myorg/secure-app
  tag: "2.5.0"
  pullPolicy: IfNotPresent

deployment:
  env:
    - name: APP_NAME
      value: "vault-integrated-app"
    - name: LOG_LEVEL
      value: "info"

    # Reference secrets from External Secrets
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: vault-app-database-credentials
          key: connection-string

    - name: API_KEY
      valueFrom:
        secretKeyRef:
          name: vault-app-api-secrets
          key: external-api-key

    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: vault-app-auth-secrets
          key: jwt-secret

  resources:
    limits:
      memory: "512Mi"
      cpu: "500m"
    requests:
      cpu: "100m"
      memory: "256Mi"

  # Mount TLS certificates from External Secrets
  volumeMounts:
    - name: tls-certs
      mountPath: /etc/ssl/app
      readOnly: true

service:
  enabled: true
  type: ClusterIP
  port: 443
  targetPort: 8443

# External Secrets configuration
externalSecrets:
  # Database credentials from Vault KV v2
  database-credentials:
    enabled: true
    refreshInterval: 15s

    secretStoreRef:
      name: vault-backend
      kind: SecretStore

    target:
      name: vault-app-database-credentials
      creationPolicy: Owner
      deletionPolicy: Retain

      # Compose connection string from individual values
      template:
        type: Opaque
        engineVersion: v2
        metadata:
          labels:
            app: "{{ .Release.Name }}"
            source: vault
        data:
          connection-string: "postgresql://{{ .username }}:{{ .password }}@{{ .host }}:{{ .port }}/{{ .database }}?sslmode=require"
          username: "{{ .username }}"
          password: "{{ .password }}"

    # Fetch individual fields
    data:
      - secretKey: username
        remoteRef:
          key: secret/data/database/postgres
          property: username
      - secretKey: password
        remoteRef:
          key: secret/data/database/postgres
          property: password
      - secretKey: host
        remoteRef:
          key: secret/data/database/postgres
          property: host
      - secretKey: port
        remoteRef:
          key: secret/data/database/postgres
          property: port
      - secretKey: database
        remoteRef:
          key: secret/data/database/postgres
          property: database

  # API secrets from Vault
  api-secrets:
    enabled: true
    refreshInterval: 1h

    secretStoreRef:
      name: vault-backend
      kind: SecretStore

    target:
      name: vault-app-api-secrets
      creationPolicy: Owner

    # Fetch all secrets from a path
    dataFrom:
      - extract:
          key: secret/data/api/external-services

    # Also fetch specific keys with transformation
    data:
      - secretKey: external-api-key
        remoteRef:
          key: secret/data/api/external-services
          property: api_key
          decodingStrategy: Base64

  # Auth secrets
  auth-secrets:
    enabled: true
    refreshInterval: 30m

    secretStoreRef:
      name: vault-backend
      kind: SecretStore

    target:
      name: vault-app-auth-secrets
      creationPolicy: Owner

    data:
      - secretKey: jwt-secret
        remoteRef:
          key: secret/data/auth/jwt
          property: secret
      - secretKey: oauth-client-id
        remoteRef:
          key: secret/data/auth/oauth
          property: client_id
      - secretKey: oauth-client-secret
        remoteRef:
          key: secret/data/auth/oauth
          property: client_secret

  # TLS certificates from Vault PKI
  tls-pki:
    enabled: true
    refreshInterval: 24h

    secretStoreRef:
      name: vault-backend
      kind: SecretStore

    target:
      name: vault-app-tls
      creationPolicy: Owner
      template:
        type: kubernetes.io/tls
        data:
          tls.crt: "{{ .certificate | b64enc }}"
          tls.key: "{{ .private_key | b64enc }}"
          ca.crt: "{{ .issuing_ca | b64enc }}"

    data:
      - secretKey: certificate
        remoteRef:
          key: pki/issue/internal-certs
          property: certificate
      - secretKey: private_key
        remoteRef:
          key: pki/issue/internal-certs
          property: private_key
      - secretKey: issuing_ca
        remoteRef:
          key: pki/issue/internal-certs
          property: issuing_ca

# Mount the TLS certificate
persistence:
  enabled: true
  volumes:
    tls-certs:
      type: secret
      secret:
        secretName: vault-app-tls
        defaultMode: 0400

# Service Account for Vault authentication
serviceAccount:
  enabled: true
  annotations:
    # For Vault Kubernetes auth method
    vault.hashicorp.com/agent-inject: "false"  # We're using ESO instead
  name: vault-app

# RBAC for External Secrets Operator
rbac:
  enabled: true
  rules:
    - apiGroups: [""]
      resources: ["secrets"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["external-secrets.io"]
      resources: ["externalsecrets", "secretstores"]
      verbs: ["get", "list", "watch"]

# Network policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8443
  egress:
    # Allow DNS
    - to:
        - namespaceSelector:
            matchLabels:
              name: kube-system
      ports:
        - protocol: UDP
          port: 53
    # Allow Vault access
    - to:
        - namespaceSelector:
            matchLabels:
              name: vault
      ports:
        - protocol: TCP
          port: 8200
    # Allow database
    - to:
        - podSelector:
            matchLabels:
              app: postgres
      ports:
        - protocol: TCP
          port: 5432

# Monitoring
serviceMonitor:
  enabled: true
  endpoints:
    - port: metrics
      interval: 30s

# Pod annotations for secret refresh
podAnnotations:
  # Force pod restart when secrets change
  secrets.reloader.stakater.com/reload: "vault-app-database-credentials,vault-app-api-secrets,vault-app-auth-secrets"
