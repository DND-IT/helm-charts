{{- if .Values.service.enabled }}
{{- $serviceName := include "generic.fullname" . -}}
{{- $serviceType := .Values.service.type | default "ClusterIP" -}}
{{- $isHeadless := and (eq $serviceType "ClusterIP") (eq (.Values.service.clusterIP | default "") "None") -}}
apiVersion: v1
kind: Service
metadata:
  name: {{ $serviceName }}
  namespace: {{ include "generic.namespace" . }}
  labels:
    {{- include "generic.labels" (dict "context" . "labels" .Values.service.labels) | nindent 4 }}
  {{- if or .Values.service.annotations .Values.commonAnnotations }}
  annotations:
    {{- include "generic.annotations" (dict "context" . "annotations" .Values.service.annotations) | nindent 4 }}
  {{- end }}
spec:
  type: {{ $serviceType }}
  {{- if or $isHeadless (hasKey .Values.service "clusterIP") }}
  clusterIP: {{ .Values.service.clusterIP | default "" }}
  {{- end }}
  {{- if and (eq $serviceType "LoadBalancer") .Values.service.loadBalancerIP }}
  loadBalancerIP: {{ .Values.service.loadBalancerIP }}
  {{- end }}
  {{- if and (eq $serviceType "LoadBalancer") .Values.service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml .Values.service.loadBalancerSourceRanges | nindent 4 }}
  {{- end }}
  {{- if and (eq $serviceType "LoadBalancer") .Values.service.loadBalancerClass }}
  loadBalancerClass: {{ .Values.service.loadBalancerClass }}
  {{- end }}
  {{- if and (eq $serviceType "LoadBalancer") .Values.service.allocateLoadBalancerNodePorts }}
  allocateLoadBalancerNodePorts: {{ .Values.service.allocateLoadBalancerNodePorts }}
  {{- end }}
  {{- if or (eq $serviceType "LoadBalancer") (eq $serviceType "NodePort") }}
  {{- with .Values.service.externalTrafficPolicy }}
  externalTrafficPolicy: {{ . }}
  {{- end }}
  {{- with .Values.service.internalTrafficPolicy }}
  internalTrafficPolicy: {{ . }}
  {{- end }}
  {{- with .Values.service.healthCheckNodePort }}
  healthCheckNodePort: {{ . }}
  {{- end }}
  {{- end }}
  {{- with .Values.service.externalIPs }}
  externalIPs:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.service.externalName }}
  {{- if eq $serviceType "ExternalName" }}
  externalName: {{ . }}
  {{- end }}
  {{- end }}
  {{- with .Values.service.sessionAffinity }}
  sessionAffinity: {{ . }}
  {{- end }}
  {{- with .Values.service.sessionAffinityConfig }}
  sessionAffinityConfig:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.service.ipFamilyPolicy }}
  ipFamilyPolicy: {{ . }}
  {{- end }}
  {{- with .Values.service.ipFamilies }}
  ipFamilies:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if .Values.service.publishNotReadyAddresses }}
  publishNotReadyAddresses: true
  {{- end }}
  {{- if ne $serviceType "ExternalName" }}
  ports:
    {{- if .Values.service.ports }}
    {{- range .Values.service.ports }}
    - name: {{ .name | default "http" }}
      port: {{ .port }}
      {{- if .targetPort }}
      targetPort: {{ .targetPort }}
      {{- else if .containerPort }}
      targetPort: {{ .containerPort }}
      {{- else }}
      targetPort: {{ .port }}
      {{- end }}
      protocol: {{ .protocol | default "TCP" }}
      {{- if and (or (eq $serviceType "NodePort") (eq $serviceType "LoadBalancer")) .nodePort }}
      nodePort: {{ .nodePort }}
      {{- end }}
      {{- if .appProtocol }}
      appProtocol: {{ .appProtocol }}
      {{- end }}
    {{- end }}
    {{- else }}
    # Fallback to single port configuration for backward compatibility
    - name: http
      port: {{ .Values.service.port | default 80 }}
      targetPort: {{ .Values.service.targetPort | default .Values.service.port | default 80 }}
      protocol: TCP
    {{- end }}
  selector:
    {{- include "generic.selectorLabels" . | nindent 4 }}
  {{- end }}
{{- end }}
{{- if .Values.extraServices }}
{{- range $name, $service := .Values.extraServices }}
{{- if $service.enabled }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ printf "%s-%s" (include "generic.fullname" $) $name }}
  namespace: {{ include "generic.namespace" $ }}
  labels:
    {{- include "generic.labels" (dict "context" $ "labels" $service.labels) | nindent 4 }}
  {{- if or $service.annotations $.Values.commonAnnotations }}
  annotations:
    {{- include "generic.annotations" (dict "context" $ "annotations" $service.annotations) | nindent 4 }}
  {{- end }}
spec:
  type: {{ $service.type | default "ClusterIP" }}
  {{- if hasKey $service "clusterIP" }}
  clusterIP: {{ $service.clusterIP }}
  {{- end }}
  {{- if and (eq ($service.type | default "ClusterIP") "LoadBalancer") $service.loadBalancerIP }}
  loadBalancerIP: {{ $service.loadBalancerIP }}
  {{- end }}
  {{- if and (eq ($service.type | default "ClusterIP") "LoadBalancer") $service.loadBalancerSourceRanges }}
  loadBalancerSourceRanges:
    {{- toYaml $service.loadBalancerSourceRanges | nindent 4 }}
  {{- end }}
  {{- with $service.externalTrafficPolicy }}
  externalTrafficPolicy: {{ . }}
  {{- end }}
  {{- with $service.sessionAffinity }}
  sessionAffinity: {{ . }}
  {{- end }}
  {{- with $service.sessionAffinityConfig }}
  sessionAffinityConfig:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- if $service.publishNotReadyAddresses }}
  publishNotReadyAddresses: true
  {{- end }}
  ports:
    {{- range $service.ports }}
    - name: {{ .name }}
      port: {{ .port }}
      {{- if .targetPort }}
      targetPort: {{ .targetPort }}
      {{- else }}
      targetPort: {{ .port }}
      {{- end }}
      protocol: {{ .protocol | default "TCP" }}
      {{- if and (or (eq ($service.type | default "ClusterIP") "NodePort") (eq ($service.type | default "ClusterIP") "LoadBalancer")) .nodePort }}
      nodePort: {{ .nodePort }}
      {{- end }}
    {{- end }}
  {{- if $service.selector }}
  selector:
    {{- toYaml $service.selector | nindent 4 }}
  {{- else }}
  selector:
    {{- include "generic.selectorLabels" $ | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
{{- end }}
