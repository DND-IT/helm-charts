suite: test helm hooks
templates:
  - lifecycle/hooks.yaml
tests:
  - it: should not render hooks by default
    asserts:
      - hasDocuments:
          count: 0

  - it: should render pre-install hook
    set:
      hooks:
        enabled: true
        preInstall:
          - name: db-migration
            image: migrate/migrate:latest
            command:
              - migrate
            args:
              - -path=/migrations
              - -database=postgres://user:pass@db:5432/mydb?sslmode=disable
              - up
            weight: 1
            deletePolicy: before-hook-creation
            ttlSecondsAfterFinished: 300
            restartPolicy: Never
            env:
              - name: DB_HOST
                value: postgres-service
            resources:
              limits:
                memory: "256Mi"
              requests:
                cpu: "100m"
                memory: "128Mi"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-install-db-migration
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-install
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "1"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: before-hook-creation
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 300
      - equal:
          path: spec.template.spec.restartPolicy
          value: Never
      - equal:
          path: spec.template.spec.containers[0].name
          value: db-migration
      - equal:
          path: spec.template.spec.containers[0].image
          value: migrate/migrate:latest
      - equal:
          path: spec.template.spec.containers[0].command[0]
          value: migrate
      - equal:
          path: spec.template.spec.containers[0].env[0].name
          value: DB_HOST
      - equal:
          path: spec.template.spec.containers[0].env[0].value
          value: postgres-service

  - it: should render post-install hook
    set:
      hooks:
        enabled: true
        postInstall:
          - name: data-seed
            image: curlimages/curl:latest
            command:
              - sh
              - -c
            args:
              - |
                curl -X POST http://RELEASE-NAME/api/seed \
                  -H "Content-Type: application/json" \
                  -d '{"action": "seed_initial_data"}'
            weight: 2
            deletePolicy: hook-succeeded
            ttlSecondsAfterFinished: 600
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-post-install-data-seed
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: post-install
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "2"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded
      - equal:
          path: spec.ttlSecondsAfterFinished
          value: 600
      - equal:
          path: spec.template.spec.containers[0].name
          value: data-seed
      - equal:
          path: spec.template.spec.containers[0].image
          value: curlimages/curl:latest

  - it: should render pre-upgrade hook
    set:
      hooks:
        enabled: true
        preUpgrade:
          - name: backup-db
            image: postgres:13-alpine
            command:
              - pg_dump
            args:
              - -h
              - postgres-service
              - -U
              - postgres
              - mydb
              - -f
              - /backup/pre-upgrade.sql
            weight: 1
            deletePolicy: before-hook-creation
            ttlSecondsAfterFinished: 3600
            volumeMounts:
              - name: backup-storage
                mountPath: /backup
            volumes:
              - name: backup-storage
                persistentVolumeClaim:
                  claimName: backup-pvc
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-upgrade-backup-db
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-upgrade
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "1"
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: before-hook-creation
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: backup-storage
      - equal:
          path: spec.template.spec.volumes[0].name
          value: backup-storage

  - it: should render post-upgrade hook
    set:
      hooks:
        enabled: true
        postUpgrade:
          - name: verify-migration
            image: migrate/migrate:latest
            command:
              - migrate
            args:
              - -path=/migrations
              - -database=postgres://user:pass@db:5432/mydb?sslmode=disable
              - version
            weight: 1
            deletePolicy: hook-succeeded
            ttlSecondsAfterFinished: 300
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-post-upgrade-verify-migration
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: post-upgrade
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: hook-succeeded

  - it: should render pre-delete hook
    set:
      hooks:
        enabled: true
        preDelete:
          - name: data-export
            image: postgres:13-alpine
            command:
              - pg_dump
            args:
              - -h
              - postgres-service
              - -U
              - postgres
              - mydb
              - -f
              - /backup/final-backup.sql
            weight: 1
            deletePolicy: hook-succeeded
            ttlSecondsAfterFinished: 3600
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-delete-data-export
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: pre-delete

  - it: should render post-delete hook
    set:
      hooks:
        enabled: true
        postDelete:
          - name: cleanup-external
            image: curlimages/curl:latest
            command:
              - sh
              - -c
            args:
              - |
                curl -X DELETE http://external-service/api/cleanup \
                  -H "Authorization: Bearer $API_TOKEN"
            weight: 1
            deletePolicy: hook-succeeded
            ttlSecondsAfterFinished: 300
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Job
      - equal:
          path: metadata.name
          value: RELEASE-NAME-post-delete-cleanup-external
      - equal:
          path: metadata.annotations["helm.sh/hook"]
          value: post-delete

  - it: should render multiple hooks with different weights
    set:
      hooks:
        enabled: true
        preInstall:
          - name: first-hook
            image: busybox:latest
            command: ["echo", "first"]
            weight: 1
          - name: second-hook
            image: busybox:latest
            command: ["echo", "second"]
            weight: 2
          - name: third-hook
            image: busybox:latest
            command: ["echo", "third"]
            weight: 3
    asserts:
      - hasDocuments:
          count: 3
      # First hook
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-install-first-hook
        documentIndex: 0
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "1"
        documentIndex: 0
      # Second hook
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-install-second-hook
        documentIndex: 1
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "2"
        documentIndex: 1
      # Third hook
      - equal:
          path: metadata.name
          value: RELEASE-NAME-pre-install-third-hook
        documentIndex: 2
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "3"
        documentIndex: 2

  - it: should apply security contexts to hook jobs
    set:
      hooks:
        enabled: true
        preInstall:
          - name: secure-hook
            image: busybox:latest
            command: ["echo", "secure"]
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 1000
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].securityContext.readOnlyRootFilesystem
          value: true
      - equal:
          path: spec.template.spec.containers[0].securityContext.capabilities.drop[0]
          value: ALL

  - it: should use default values for optional fields
    set:
      hooks:
        enabled: true
        preInstall:
          - name: minimal-hook
            image: busybox:latest
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: metadata.annotations["helm.sh/hook-weight"]
          value: "1"  # default weight
      - equal:
          path: metadata.annotations["helm.sh/hook-delete-policy"]
          value: before-hook-creation  # default for pre-install
      - equal:
          path: spec.template.spec.restartPolicy
          value: Never  # default restartPolicy
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: IfNotPresent  # default imagePullPolicy
