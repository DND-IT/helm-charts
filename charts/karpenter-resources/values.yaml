# Values for karpenter-resources chart
# This chart manages Karpenter NodePools and EC2NodeClasses for AWS EKS clusters

# Global chart settings
nameOverride: ""
fullnameOverride: ""

# Global values
global:
  # Enable EKS discovery - uses standard EKS tags for subnets and security groups
  eksDiscovery:
    enabled: false
    # Cluster name - used for tagging and discovery (deprecated, use tags instead)
    clusterName: ""
    # Custom discovery tags for subnets and security groups
    # These tags will be used when enabled is true
    tags:
      # Tags for subnet discovery
      subnets:
        karpenter.sh/discovery: ""  # Will use clusterName if not specified
        # Add additional tags as needed:
        # environment: "production"
        # tier: "private"
      # Tags for security group discovery
      securityGroups:
        karpenter.sh/discovery: ""  # Will use clusterName if not specified
        # Add additional tags as needed:
        # purpose: "karpenter-nodes"

  # Karpenter Role Name - Required for node IAM permissions
  role: ""

# NodePools configuration
# Each key under nodePools becomes a separate NodePool resource
nodePools:
  default:
    enabled: false
    # --- NodePool metadata ---
    labels: {}
    annotations: {}

    # --- NodePool template spec ---
    nodeClassRef:
      group: karpenter.k8s.aws
      kind: EC2NodeClass
      name: default

    # --- Node taints and startup taints ---
    taints: []
    startupTaints: []

    # --- Node expiry configuration ---
    # Use "Never" to disable expiry
    expireAfter: "720h"

    # --- Node requirements ---
    requirements:
      - key: "karpenter.k8s.aws/instance-category"
        operator: In
        values: ["c", "m", "r", "t"]
      - key: "karpenter.k8s.aws/instance-cpu"
        operator: In
        values: ["4", "8", "16", "32"]
      - key: "karpenter.k8s.aws/instance-hypervisor"
        operator: In
        values: ["nitro"]
      - key: "karpenter.k8s.aws/instance-memory"
        operator: Gt
        values: ["2048"]
      - key: "karpenter.sh/capacity-type"
        operator: In
        values: ["spot", "on-demand"]
      - key: "karpenter.k8s.aws/instance-generation"
        operator: Gt
        values: ["2"]

    # --- Disruption configuration ---
    disruption:
      consolidationPolicy: "WhenEmptyOrUnderutilized"
      consolidateAfter: "1h"
      # budgets:
      #   - nodes: "20%"
      #     reasons:
      #       - "Empty"
      #       - "Drifted"
      #   - nodes: "5"
      #   - nodes: "0"
      #     schedule: "@daily"
      #     duration: 10m
      #     reasons:
      #       - "Underutilized"

    # --- Resource limits ---
    limits:
      cpu: 1000
      memory: 4000Gi

# EC2NodeClass configuration
# Each key under ec2NodeClasses becomes a separate EC2NodeClass resource
ec2NodeClasses:
  default:
    enabled: false

    # --- Kubelet configuration ---
    kubelet:
      {}
      # podsPerCore: 2
      # maxPods: 20
      # systemReserved:
      #     cpu: 100m
      #     memory: 100Mi
      #     ephemeral-storage: 1Gi
      # kubeReserved:
      #     cpu: 200m
      #     memory: 100Mi
      #     ephemeral-storage: 3Gi
      # evictionHard:
      #     memory.available: 5%
      #     nodefs.available: 10%
      #     nodefs.inodesFree: 10%
      # evictionSoft:
      #     memory.available: 500Mi
      #     nodefs.available: 15%
      #     nodefs.inodesFree: 15%
      # evictionSoftGracePeriod:
      #     memory.available: 1m
      #     nodefs.available: 1m30s
      #     nodefs.inodesFree: 2m
      # evictionMaxPodGracePeriod: 60
      # imageGCHighThresholdPercent: 85
      # imageGCLowThresholdPercent: 80
      # cpuCFSQuota: true
      # clusterDNS: ["10.0.1.100"]

    # --- AMI configuration ---
    # amiFamily is required and defines the UserData format and block device mappings
    # Supported values: AL2, AL2023, Bottlerocket, Custom, Windows2019, Windows2022
    amiFamily: "Bottlerocket"
    # amiSelectorTerms is REQUIRED in Karpenter v1+
    amiSelectorTerms:
      - alias: bottlerocket@latest  # EKS optimized AMI selection (family@version)
    # Alternative AMI selector examples:
    # - id: "ami-1234567890abcdef0"  # Specific AMI ID
    # - name: "my-custom-ami*"       # AMI name pattern
    # - owner: "self"                # AWS account ("self", "amazon", "aws-marketplace")
    # - tags:
    #     Environment: "production"

    # --- On-Demand Capacity Reservation (ODCR) configuration ---
    # capacityReservationSelectorTerms specifies which ODCRs to target
    capacityReservationSelectorTerms: []
    # - id: "cr-1234567890abcdef0"  # Specific Capacity Reservation ID
    # - tags:
    #     karpenter.sh/discovery: "${clusterName}"
    #     environment: "production"
    # Note: When using ODCRs, consider setting:
    # - requirements to match the ODCR instance types
    # - taints to ensure only appropriate workloads use reserved capacity

    # --- Subnet configuration ---
    subnetSelectorTerms: []
    # - id: "subnet-12345678"
    # - tags:
    #     karpenter.sh/discovery: "${clusterName}"

    # --- Security group configuration ---
    securityGroupSelectorTerms: []
    # - id: "sg-12345678"
    # - name: "my-security-group"
    # - tags:
    #     karpenter.sh/discovery: "${clusterName}"

    # --- IAM configuration ---
    # role is REQUIRED in Karpenter v1+
    # Karpenter auto-generates the instance profile from the role
    role: ""

    # --- EC2 instance configuration ---
    tags: {}
    # Controls public IP assignment for instances
    # associatePublicIPAddress: false

    # Instance metadata service configuration
    metadataOptions:
      httpEndpoint: enabled               # Enable/disable IMDS
      httpProtocolIPv6: disabled          # IPv6 endpoint support
      httpPutResponseHopLimit: 2          # 2 is required for Karpenter in Fargate
      httpTokens: required                # Require IMDSv2 tokens

    # Instance store policy for NVMe SSD handling
    # instanceStorePolicy: RAID0  # Options: RAID0, NVME

    # --- User data configuration ---
    # userData: |
    #   # !/bin/bash
    #   # Add custom user data scripts here

    # --- Storage configuration ---
    blockDeviceMappings:
      - deviceName: /dev/xvda
        ebs:
          volumeSize: 4Gi
          volumeType: gp3
          encrypted: true
          deleteOnTermination: true
      - deviceName: /dev/xvdb
        ebs:
          volumeSize: 50Gi
          volumeType: gp3
          encrypted: true
          deleteOnTermination: true
