apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "webapp.name" . }}
  annotations:
    {{- toYaml .Values.metadata.deploymentAnnotations | nindent 4 }}
  labels:
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    type: {{ .Chart.Name }}
    app: {{ include "webapp.name" . }}
    {{- if .Values.metadata.labels.datadog.env }}
    tags.datadoghq.com/env: {{ .Values.metadata.labels.datadog.env }}
    {{- end }}
    {{- if .Values.metadata.labels.datadog.service }}
    tags.datadoghq.com/service: {{ .Values.metadata.labels.datadog.service }}
    {{- end }}
    {{- if .Values.metadata.labels.datadog.version }}
    tags.datadoghq.com/version: {{ .Values.metadata.labels.datadog.version }}
    {{- end }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- if and (not .Values.scale.enabled) (.Values.replicas) }} # https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#migrating-deployments-and-statefulsets-to-horizontal-autoscaling
  replicas: {{ .Values.replicas }}
  {{- end }}
  selector:
    matchLabels:
      type: {{ .Chart.Name }}
      app: {{ include "webapp.name" . }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: {{ .Values.update.maxUnavailable }}
      maxSurge: {{ .Values.update.maxSurge }}
  template:
    metadata:
      annotations:
        {{- toYaml .Values.metadata.podAnnotations | nindent 8 }}
      labels:
        type: {{ .Chart.Name }}
        app: {{ include "webapp.name" . }}
        {{- if .Values.metadata.labels.datadog.env }}
        tags.datadoghq.com/env: {{ .Values.metadata.labels.datadog.env }}
        {{- end }}
        {{- if .Values.metadata.labels.datadog.service }}
        tags.datadoghq.com/service: {{ .Values.metadata.labels.datadog.service }}
        {{- end }}
        {{- if .Values.metadata.labels.datadog.version }}
        tags.datadoghq.com/version: {{ .Values.metadata.labels.datadog.version }}
        {{- end }}
    spec:
      {{- if or .Values.aws_iam_role_arn .Values.serviceAccountName .Values.deploymentServiceAccountName }}
      serviceAccountName: {{ coalesce .Values.deploymentServiceAccountName .Values.serviceAccountName (include "webapp.name" .) }}
      securityContext:
        fsGroup: 65534 # To be able to read Kubernetes and AWS token files
      {{- else }}
      serviceAccountName: default
      {{- end }}
      {{- if .Values.initContainer.enabled }}
      initContainers:
        - name: {{ .Values.initContainer.name }}
          image: "{{ .Values.initContainer.image }}:{{ .Values.initContainer.image_tag }}"
          {{- if .Values.initContainer.command }}
          command:
            {{- .Values.initContainer.command | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.initContainer.args }}
          args:
            {{- .Values.initContainer.args | toYaml | nindent 12 }}
          {{- end }}
      {{- end }}
      containers:
        - name: {{ include "webapp.name" . }}
          image: "{{ .Values.image_repo }}:{{ .Values.image_tag }}"
          imagePullPolicy: {{ .Values.image_pull_policy }}
          {{- if .Values.command }}
          command:
            {{- .Values.command | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- .Values.args | toYaml | nindent 12 }}
          {{- end }}
          env:
            - name: PORT
              value: {{ default .Values.service.targetPort .Values.port | quote }}
            {{- if .Values.metadata.labels.datadog.env }}
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            {{- end }}
            {{- if .Values.metadata.labels.datadog.service }}
            - name: DD_SERVICE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/service']
            {{- end }}
            {{- if .Values.metadata.labels.datadog.version }}
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            {{- end }}
            {{- if .Values.env }}
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
            {{- end }}
          {{- if or .Values.externalSecrets.secretNames .Values.extraEnvFrom }}
          envFrom:
            {{- with .Values.externalSecrets.secretNames }}
              {{- range . }}
            - secretRef:
                name: {{ . | lower | replace "/" "-" }}
              {{- end }}
            {{- end }}
            {{- with .Values.extraEnvFrom }}
              {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- end}}
          ports:
            - name: {{ .Values.service.portName }}
              containerPort:  {{ default .Values.service.targetPort .Values.port }}
              protocol: TCP
          {{- if .Values.probe.liveness }}
          livenessProbe:
            httpGet:
              path: {{ .Values.probe.liveness | quote }}
              port: http
            initialDelaySeconds: {{ .Values.probe.livenessInitialDelaySeconds }}
            periodSeconds: {{ .Values.probe.livenessPeriodSeconds }}
            timeoutSeconds: {{ .Values.probe.livenessTimeoutSeconds }}
          {{- end }}
          {{- if .Values.probe.readiness }}
          readinessProbe:
            httpGet:
              path: {{ .Values.probe.readiness | quote }}
              port: http
            initialDelaySeconds: {{ .Values.probe.readinessInitialDelaySeconds }}
            periodSeconds: {{ .Values.probe.readinessPeriodSeconds }}
            timeoutSeconds: {{ .Values.probe.readinessTimeoutSeconds }}
            failureThreshold: {{ .Values.probe.readinessFailureThreshold }}
          {{- end }}
          {{- if .Values.probe.liveness }}
          startupProbe:
            httpGet:
              path: {{ coalesce .Values.probe.startup .Values.probe.liveness | quote }}
              port: http
              {{- if .Values.probe.startupHttpHeaders }}
              httpHeaders:
                {{ .Values.probe.startupHttpHeaders | toYaml | nindent 16 }}
              {{- end }}
            failureThreshold: 40
            periodSeconds: 3
            timeoutSeconds: {{ .Values.probe.startupTimeoutSeconds }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if .Values.topologySpreadConstraints.enabled }}
      topologySpreadConstraints:
        {{- range .Values.topologySpreadConstraints.topologyKeys }}
        - topologyKey: {{ . | quote }}
          labelSelector:
            matchLabels:
              app: {{ include "webapp.name" $ }}
              type: {{ $.Chart.Name }}
          maxSkew: {{ $.Values.topologySpreadConstraints.maxSkew }}
          whenUnsatisfiable: {{ $.Values.topologySpreadConstraints.whenUnsatisfiable }}
        {{- end }}
    {{- end }}
